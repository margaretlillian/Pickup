// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Pickup.Data;
using System;

namespace Pickup.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20180604163411_BlackoutDays_dbcontext")]
    partial class BlackoutDays_dbcontext
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Pickup.Models.Address", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AddressID");

                    b.Property<string>("Apartment");

                    b.Property<string>("BottomFloor");

                    b.Property<string>("City");

                    b.Property<int>("DonorCustomerID");

                    b.Property<string>("Neighborhood");

                    b.Property<string>("Street");

                    b.Property<string>("ZIP");

                    b.HasKey("ID");

                    b.HasIndex("AddressID");

                    b.HasIndex("DonorCustomerID");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Pickup.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FullName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Pickup.Models.Blacklist", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("DonorCustomerID");

                    b.Property<string>("Reason");

                    b.HasKey("ID");

                    b.HasIndex("DonorCustomerID");

                    b.ToTable("BlacklistedDonors");
                });

            modelBuilder.Entity("Pickup.Models.BlackoutDays", b =>
                {
                    b.Property<DateTime>("DateBlackedOut");

                    b.HasKey("DateBlackedOut");

                    b.ToTable("BlackoutDays");
                });

            modelBuilder.Entity("Pickup.Models.DonorCustomer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("DonorCustomerID");

                    b.Property<string>("Email");

                    b.Property<bool>("FOT");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("PhoneNumberTwo");

                    b.HasKey("ID");

                    b.HasIndex("DonorCustomerID");

                    b.ToTable("DonorsCustomers");
                });

            modelBuilder.Entity("Pickup.Models.Furniture", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("FurnitureCategoryID");

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.HasIndex("FurnitureCategoryID");

                    b.ToTable("Furniture");
                });

            modelBuilder.Entity("Pickup.Models.FurnitureCategory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("FurnitureCategories");
                });

            modelBuilder.Entity("Pickup.Models.FurniturePickupOrDelivery", b =>
                {
                    b.Property<int>("DonationPickupID");

                    b.Property<int>("FurnitureID");

                    b.Property<string>("Description");

                    b.Property<int>("Quantity");

                    b.HasKey("DonationPickupID", "FurnitureID");

                    b.HasIndex("FurnitureID");

                    b.ToTable("FurnitureDonationPickups");
                });

            modelBuilder.Entity("Pickup.Models.PickupOrDelivery", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AddressID");

                    b.Property<bool>("CallEnRoute");

                    b.Property<bool>("Cancelled");

                    b.Property<bool>("Delivery");

                    b.Property<DateTime>("PickupDateTime");

                    b.Property<DateTime>("ScheduleDateTime");

                    b.Property<string>("SpecialInstructions");

                    b.Property<string>("UserId");

                    b.HasKey("ID");

                    b.HasIndex("AddressID");

                    b.HasIndex("UserId");

                    b.ToTable("PickupsDeliveries");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Pickup.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Pickup.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pickup.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Pickup.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Pickup.Models.Address", b =>
                {
                    b.HasOne("Pickup.Models.Address")
                        .WithMany("Addresses")
                        .HasForeignKey("AddressID");

                    b.HasOne("Pickup.Models.DonorCustomer", "DonorCustomer")
                        .WithMany()
                        .HasForeignKey("DonorCustomerID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Pickup.Models.Blacklist", b =>
                {
                    b.HasOne("Pickup.Models.DonorCustomer", "DonorCustomer")
                        .WithMany()
                        .HasForeignKey("DonorCustomerID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Pickup.Models.DonorCustomer", b =>
                {
                    b.HasOne("Pickup.Models.DonorCustomer")
                        .WithMany("DonorsCustomers")
                        .HasForeignKey("DonorCustomerID");
                });

            modelBuilder.Entity("Pickup.Models.Furniture", b =>
                {
                    b.HasOne("Pickup.Models.FurnitureCategory", "FurnitureCategory")
                        .WithMany("Furniture")
                        .HasForeignKey("FurnitureCategoryID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Pickup.Models.FurniturePickupOrDelivery", b =>
                {
                    b.HasOne("Pickup.Models.PickupOrDelivery", "DonationPickup")
                        .WithMany("FurnitureDonationPickups")
                        .HasForeignKey("DonationPickupID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pickup.Models.Furniture", "Furniture")
                        .WithMany("FurnitureDonationPickups")
                        .HasForeignKey("FurnitureID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Pickup.Models.PickupOrDelivery", b =>
                {
                    b.HasOne("Pickup.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Pickup.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("DonationPickups")
                        .HasForeignKey("UserId");
                });
#pragma warning restore 612, 618
        }
    }
}
